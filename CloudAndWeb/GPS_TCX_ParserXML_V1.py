# Purpose: parse TCX files generated by MapMyRide
# see https://pypi.python.org/pypi/python-tcxparser/0.7.1
# 2017 10 15 AJL Output to SQL DB

import xml.etree.ElementTree as ET
import sqlite3
import json
import codecs
import platform

def NowSQL():
    # Purpose: create a SQL compatible date format (YYYY-MM-DDTHH:MM:SS)
    # 2017 02 04 AJL Created file
    # 2017 02 10 AJL Corrected error where single digit dates were not having hyphens added

    # Python date format
    PyTime = localtime()

    # build the date string in SQL format (YYYY-MM-DDTHH:MM:SS)
    sYear = str(PyTime.tm_year)

    sMonth = str(PyTime.tm_mon)
    if (PyTime.tm_mon < 10):
        sMonth = "0" + sMonth

    sDay = str(PyTime.tm_mday)
    if (PyTime.tm_mday < 10):
        sDay = "0" + sDay
        
    sHour = str(PyTime.tm_hour)
    if (PyTime.tm_hour < 10):
        sHour = "0" + sHour

    sMinute = str(PyTime.tm_min)
    if (PyTime.tm_min < 10):
        sMinute = "0" + sMinute
        
    sSecond = str(PyTime.tm_sec)
    if (PyTime.tm_sec < 10):
        sSecond = "0" + sSecond
            
    strSQL_date = sYear + "-" + sMonth + "-" + sDay + "T" + str(sHour) + ":" + str(sMinute) + ":" + str(sSecond)

    return strSQL_date

# the dataset uses a defult namespace that must prepend seraches
defaultnamespace = '{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}'
GPStracking = [[0,0,0]]

myXML = ET.parse('C:\Users\Andy\OneDrive\code\Python\myCode\RoadQualityProject\Data\Rode 18_77 mi on Baroudeur 20.tcx')
root = myXML.getroot()
print len(root)
print "RootDotTag ", root.tag
print "RootDotAttrib ", root.attrib

for child in root:
    print "ChildDotTag and ChildDotAttrib" , child.tag, child.attrib

print "Times:"
for times in myXML.iter(defaultnamespace+'Time'):
    #print times.text
    GPStracking.append([times.text, 0.0, 0.0])



icount = 1
print "LatitudeDegrees:"
for lats in myXML.iter(defaultnamespace+'LatitudeDegrees'):
    #print lats.text
    savept = GPStracking[icount]
    savept[1] = lats.text
    GPStracking[icount] = savept
    icount = icount + 1

# prep an SQLite DB for output
myOS = platform.system()
if (myOS[0:1] == "W"):
    conn = sqlite3.connect('C:\Users\Andy\OneDrive\code\Python\myCode\RoadQualityProject\Data\myRoadDataGPS.sqlite')

cur = conn.cursor()

# empty database of old data
cur.execute('''DELETE FROM GPS_Data WHERE LAT > -1''')

icount = 1
print "LongitudeDegrees:"
for lons in myXML.iter(defaultnamespace+'LongitudeDegrees'):
    #print lons.text
    savept = GPStracking[icount]
    savept[2] = lons.text
    GPStracking[icount] = savept
    print GPStracking[icount]
    #write to SQL file
    data_0 = savept[0]
    data_1 = savept[1]
    data_2 = savept[2]
    cur.execute('''INSERT OR REPLACE INTO GPS_Data
    (GPS_Time,
    LAT,
    LON)
    VALUES ( ?,
    ?,
    ?
     )''', 
    ( data_0,
    data_1,
    data_2
    ))
    icount = icount + 1
    
# end of script
conn.commit()
print("Done!")
